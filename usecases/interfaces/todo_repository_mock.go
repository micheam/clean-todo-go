// Code generated by MockGen. DO NOT EDIT.
// Source: ./todo_repository.go

// Package is a generated GoMock package.
package interfaces

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/micheam/clean-architecture-go/entities"
	reflect "reflect"
)

// MockTodoRepository is a mock of TodoRepository interface
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockTodoRepository) Register(ctx context.Context, todo UnsavedTodo) (SavedTodo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, todo)
	ret0, _ := ret[0].(SavedTodo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockTodoRepositoryMockRecorder) Register(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTodoRepository)(nil).Register), ctx, todo)
}

// Get mocks base method
func (m *MockTodoRepository) Get(ctx context.Context, id entities.ID) (SavedTodo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(SavedTodo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockTodoRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTodoRepository)(nil).Get), ctx, id)
}

// List mocks base method
func (m *MockTodoRepository) List(ctx context.Context) ([]SavedTodo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]SavedTodo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoRepositoryMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoRepository)(nil).List), ctx)
}

// MockTodoRegisterer is a mock of TodoRegisterer interface
type MockTodoRegisterer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRegistererMockRecorder
}

// MockTodoRegistererMockRecorder is the mock recorder for MockTodoRegisterer
type MockTodoRegistererMockRecorder struct {
	mock *MockTodoRegisterer
}

// NewMockTodoRegisterer creates a new mock instance
func NewMockTodoRegisterer(ctrl *gomock.Controller) *MockTodoRegisterer {
	mock := &MockTodoRegisterer{ctrl: ctrl}
	mock.recorder = &MockTodoRegistererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoRegisterer) EXPECT() *MockTodoRegistererMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockTodoRegisterer) Register(ctx context.Context, todo UnsavedTodo) (SavedTodo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, todo)
	ret0, _ := ret[0].(SavedTodo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockTodoRegistererMockRecorder) Register(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockTodoRegisterer)(nil).Register), ctx, todo)
}

// MockTodoGetter is a mock of TodoGetter interface
type MockTodoGetter struct {
	ctrl     *gomock.Controller
	recorder *MockTodoGetterMockRecorder
}

// MockTodoGetterMockRecorder is the mock recorder for MockTodoGetter
type MockTodoGetterMockRecorder struct {
	mock *MockTodoGetter
}

// NewMockTodoGetter creates a new mock instance
func NewMockTodoGetter(ctrl *gomock.Controller) *MockTodoGetter {
	mock := &MockTodoGetter{ctrl: ctrl}
	mock.recorder = &MockTodoGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoGetter) EXPECT() *MockTodoGetterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockTodoGetter) Get(ctx context.Context, id entities.ID) (SavedTodo, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(SavedTodo)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get
func (mr *MockTodoGetterMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTodoGetter)(nil).Get), ctx, id)
}

// MockTodoFinder is a mock of TodoFinder interface
type MockTodoFinder struct {
	ctrl     *gomock.Controller
	recorder *MockTodoFinderMockRecorder
}

// MockTodoFinderMockRecorder is the mock recorder for MockTodoFinder
type MockTodoFinderMockRecorder struct {
	mock *MockTodoFinder
}

// NewMockTodoFinder creates a new mock instance
func NewMockTodoFinder(ctrl *gomock.Controller) *MockTodoFinder {
	mock := &MockTodoFinder{ctrl: ctrl}
	mock.recorder = &MockTodoFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoFinder) EXPECT() *MockTodoFinderMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockTodoFinder) List(ctx context.Context) ([]SavedTodo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]SavedTodo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoFinderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoFinder)(nil).List), ctx)
}
