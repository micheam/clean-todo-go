// Code generated by MockGen. DO NOT EDIT.
// Source: create_todo.go

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCreateTodoInputPort is a mock of CreateTodoInputPort interface
type MockCreateTodoInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTodoInputPortMockRecorder
}

// MockCreateTodoInputPortMockRecorder is the mock recorder for MockCreateTodoInputPort
type MockCreateTodoInputPortMockRecorder struct {
	mock *MockCreateTodoInputPort
}

// NewMockCreateTodoInputPort creates a new mock instance
func NewMockCreateTodoInputPort(ctrl *gomock.Controller) *MockCreateTodoInputPort {
	mock := &MockCreateTodoInputPort{ctrl: ctrl}
	mock.recorder = &MockCreateTodoInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateTodoInputPort) EXPECT() *MockCreateTodoInputPortMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockCreateTodoInputPort) Handle(ctx context.Context, data CreateTodoInputData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle
func (mr *MockCreateTodoInputPortMockRecorder) Handle(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCreateTodoInputPort)(nil).Handle), ctx, data)
}

// MockCreateTodoOutputPort is a mock of CreateTodoOutputPort interface
type MockCreateTodoOutputPort struct {
	ctrl     *gomock.Controller
	recorder *MockCreateTodoOutputPortMockRecorder
}

// MockCreateTodoOutputPortMockRecorder is the mock recorder for MockCreateTodoOutputPort
type MockCreateTodoOutputPortMockRecorder struct {
	mock *MockCreateTodoOutputPort
}

// NewMockCreateTodoOutputPort creates a new mock instance
func NewMockCreateTodoOutputPort(ctrl *gomock.Controller) *MockCreateTodoOutputPort {
	mock := &MockCreateTodoOutputPort{ctrl: ctrl}
	mock.recorder = &MockCreateTodoOutputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateTodoOutputPort) EXPECT() *MockCreateTodoOutputPortMockRecorder {
	return m.recorder
}

// Complete mocks base method
func (m *MockCreateTodoOutputPort) Complete(ctx context.Context, data *CreateTodoOutputData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete
func (mr *MockCreateTodoOutputPortMockRecorder) Complete(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockCreateTodoOutputPort)(nil).Complete), ctx, data)
}
